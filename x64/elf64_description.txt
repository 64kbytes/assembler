root@baytree:/home/marcelo/Projects/64k/assembler/x64/empty# hexdump -C empty



00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|


0x00	7f 45 4c 46		magic number

0x04	02				This byte is set to either 1 or 2 to signify 32- or 
						64-bit format, respectively.

0x05	01				This byte is set to either 1 or 2 to signify little or 
						big endianness, respectively. This affects
						interpretation of multi-byte fields starting with offset
						0x10.

0x06	01				Set to 1 for the original version of ELF.

0x07	00				Identifies the target operating system ABI.
						Value 	ABI
						0x00 	System V
						0x01 	HP-UX
						0x02 	NetBSD
						0x03 	Linux
						0x06 	Solaris
						0x07 	AIX
						0x08 	IRIX
						0x09 	FreeBSD
						0x0C 	OpenBSD
						0x0D 	OpenVMS

						It is often set to 0 regardless of the target platform.

--------------------------------------------------------------------------------

0x08	00				Further specifies the ABI version. Its interpretation 
						depends on the target ABI. Linux kernel (after at least 
						2.6) has no definition of it. In that case, offset and 
						size of EI_PAD are 8.

0x09	00				currently unused

0x10	00 00			1, 2, 3, 4 specify whether the object is relocatable, 
						executable, shared, or core, respectively.

0x12	00 00			Specifies target instruction set architecture. 
						Some examples are:
						Value 	ISA
						0x02 	SPARC
						0x03 	x86
						0x08 	MIPS
						0x14 	PowerPC
						0x28 	ARM
						0x2A 	SuperH
						0x32 	IA-64
						0x3E 	x86-64
						0xB7 	AArch64

0x14	00 00			Set to 1 for the original version of ELF.

--------------------------------------------------------------------------------

00000010  02 00 3e 00 01 00 00 00  b0 00 40 00 00 00 00 00  |..>.......@.....|



0x10	02 00 3e 00 01 00 00 00		This is the memory address of the entry
									point from where the process starts 
									executing. This field is either 32 or 64
									bits long depending on the format defined 
									earlier.

0x18	b0 00 40 00 00 00 00 00		Points to the start of the program header
									table. It usually follows the file header
									immediately making the offset 0x40 for
									64-bit ELF executables.

--------------------------------------------------------------------------------

00000020  40 00 00 00 00 00 00 00  e0 00 00 00 00 00 00 00  |@...............|


0x20	40 00 00 00 00 00 00 00		Points to the start of the program header 
									table. It usually follows the file header 
									immediately making the offset 0x40 for 
									64-bit ELF executables.

0x28	e0 00 00 00 00 00 00 00		Points to the start of the section header 
									table.

--------------------------------------------------------------------------------

00000030  00 00 00 00 40 00 38 00  02 00 40 00 04 00 03 00  |....@.8...@.....|


0x30	00 00 00 00					Interpretation of this field depends on the
									target architecture.

0x34	40 00 						Contains the size of this header, normally 
									64 bytes for 64-bit and 52 for 32-bit
									format.

0x36	38 00						Contains the size of a program header table
									entry.

0x38	02 00						Contains the number of entries in the 
									program header table.

0x3a	40 00						Contains the size of a section header table
									entry.

0x3c	04 00						Contains the number of entries in the 
									section header table.				

0x3e	03 00						Contains index of the section header table 
									entry that contains the section names.

--------------------------------------------------------------------------------

00000040  01 00 00 00 05 00 00 00  00 00 00 00 00 00 00 00  |................|
00000050  00 00 40 00 00 00 00 00  00 00 40 00 00 00 00 00  |..@.......@.....|
00000060  bc 00 00 00 00 00 00 00  bc 00 00 00 00 00 00 00  |................|
00000070  00 00 20 00 00 00 00 00  01 00 00 00 06 00 00 00  |.. .............|
00000080  bc 00 00 00 00 00 00 00  bc 00 60 00 00 00 00 00  |..........`.....|
00000090  bc 00 60 00 00 00 00 00  0b 00 00 00 00 00 00 00  |..`.............|
000000a0  0b 00 00 00 00 00 00 00  00 00 20 00 00 00 00 00  |.......... .....|

000000b0  b8 3c 00 00 00 bf 00 00  00 00 0f 05 73 6f 6d 65  |.<..........some|
000000c0  73 74 72 69 6e 67 0a 00  2e 73 68 73 74 72 74 61  |string...shstrta|
000000d0  62 00 2e 74 65 78 74 00  2e 64 61 74 61 00 00 00  |b..text..data...|

--------------------------------------------------------------------------------

000000e0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000120  0b 00 00 00 01 00 00 00  06 00 00 00 00 00 00 00  |................|
00000130  b0 00 40 00 00 00 00 00  b0 00 00 00 00 00 00 00  |..@.............|
00000140  0c 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000150  10 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000160  11 00 00 00 01 00 00 00  03 00 00 00 00 00 00 00  |................|
00000170  bc 00 60 00 00 00 00 00  bc 00 00 00 00 00 00 00  |..`.............|
00000180  0b 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000190  04 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
000001a0  01 00 00 00 03 00 00 00  00 00 00 00 00 00 00 00  |................|
000001b0  00 00 00 00 00 00 00 00  c7 00 00 00 00 00 00 00  |................|
000001c0  17 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
000001d0  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
000001e0